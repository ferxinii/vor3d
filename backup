
// #define CONVHULL_3D_ENABLE

#include "simplical_complex.c"
// #include "convhull_3d.h"


typedef struct vdiagram {
    int N_vcells;
    double **vertices;  // Voronoi vertices, same ordering as delaunay's setup!
    struct vcell *head;
} s_vdiagram;


typedef struct vcell {
    int Nv;
    int *vertex_id;
    int Nf;
    struct vface *faces;
} s_vcell;


typedef struct vface {
    int Nv;
    int *vertex_id;
} s_vface;


s_vcell *malloc_vcell(int N_vertices)
{
    s_vcell *out = malloc(sizeof(s_vcell));
    out->Nv = N_vertices;
    out->vertex_id = malloc(sizeof(int) * N_vertices);
    return out;
}


void extract_vertex(const s_setup *setup, const s_ncell *ncell, double *out)
{
    static double **vertices_ncell = NULL;
    if (!vertices_ncell) vertices_ncell = malloc_matrix(4, 3);
    
    extract_vertices_ncell(setup, ncell, vertices_ncell);

    find_center_mass(vertices_ncell, 4, 3, out);
}


s_vdiagram *initialize_vdiagram(const s_setup *setup)
{
    s_vdiagram *out = malloc(sizeof(s_vdiagram));
    out->N_vcells = setup->N_ncells;
    out->vertices = malloc_matrix(setup->N_ncells, 3);
    
    s_ncell *current = setup->head;
    int ii = 0;
    while (current) {
        double CM[3];
        extract_vertex(setup, current, CM);
        
        out->vertices[ii][0] = CM[0];
        out->vertices[ii][1] = CM[1];
        out->vertices[ii][2] = CM[2];

        current = current->next;
        ii++;
    }

    return out;
}


void update_ncell_counter(const s_setup *setup)
{
    s_ncell *current = setup->head;
    int ii = 0;
    while (current) {
        current->count = ii;
        current = current->next;
        ii++;
    }
}


s_vcell *extract_voronoi_cell(const s_setup *setup, int vertex_id)
{
    // Find an ncell with this vertex
    s_ncell *ncell = setup->head;
    while (!inarray(ncell->vertex_id, 4, vertex_id)) {
        ncell = ncell->next;
    }

    // Find "complementary" indices to localid
    int v_localid = id_where_equal_int(ncell->vertex_id, 4, vertex_id);
    int v_localid_COMP[3];
    int kk=0;
    for (int ii=0; ii<4; ii++) {
        if (ii != v_localid) {
            v_localid_COMP[kk] = ii;
            kk++;
        }
    }

    // Mark ncells incident to point (dim 0)
    initialize_ncells_mark(setup);
    mark_ncells_incident_face(setup, ncell, v_localid_COMP, 0);

    int Nv = count_marked(setup);
    s_vcell *vcell = malloc_vcell(Nv);
    
    // Extract vertices of voronoi cell
    s_ncell *current = setup->head;
    kk = 0;
    while (current) {
        if (current->mark == 1) {
            vcell->vertex_id[kk] = current->count;
            kk++;
        }
        current = current->next;
    }

    return vcell;
}
